# Python OOP와 텐서 {#class}

```{r, echo=FALSE, message=FALSE, warning=FALSE, include=FALSE}
Sys.setenv(RETICULATE_PYTHON = "/opt/homebrew/Caskroom/miniconda/base/envs/torch/bin/python")
library(reticulate)
use_python("/opt/homebrew/Caskroom/miniconda/base/envs/torch/bin/python", required = T)
```

Python의 PyTorch는 OOP(Object-Oriented Programming, 객체지향 프로그래밍) 기반으로 설계되어 있다. 텐서와 신경망 등의 구조는 모두 Python 클래스와 메서드로 정의된다. Python에서 OOP 개념을 활용하는 방법과 PyTorch의 관련성을 살펴보자.

## 클래스(Class), 메서드(Method), 속성(Attribute)

Python에서 클래스를 정의하려면 class 키워드를 사용한다. 클래스는 속성(변수)과 메서드(함수)를 포함하는 설계도를 제공한다.

```{python}
class ExampleClass:
    # 속성 (필드)
    variable = None
    
    # 생성자 (클래스 초기화)
    def __init__(self, value):
        self.variable = value
    
    # 메서드
    def print_variable(self):
        print(f"Value: {self.variable}")
```

### 클래스 사용하기

위에서 정의한 클래스를 사용해 객체를 생성하고, 메서드와 속성에 접근할 수 있다.

```{python}
example = ExampleClass("Hello")
example.print_variable()  # 출력: Value: Hello
```

### 학생 클래스 예제

객체지향 프로그래밍의 개념을 이해하기 위해 “학생” 클래스(Student)를 만들어보자. 이 클래스는 학생의 이름, 이메일, 중간고사 점수, 기말고사 점수를 저장하고, 총점과 평균을 계산하는 메서드를 제공한다.

```{python}
class Student:
    def __init__(self, first, last, midterm, final):
        self.first = first
        self.last = last
        self.email = f"{first.lower()}-{last.lower()}@gmail.com"
        self.midterm = midterm
        self.final = final
    
    # 메서드: 총점 계산
    def calculate_total(self):
        return self.midterm + self.final
    
    # 메서드: 평균 계산
    def calculate_average(self):
        return (self.midterm + self.final) / 2
```

```{python}
# 객체 생성
issac = Student("Issac", "Lee", 70, 50)
bomi = Student("Bomi", "Kim", 65, 80)

print(issac.first, issac.last, issac.email, issac.calculate_total())
print(bomi.first, bomi.last, bomi.email, bomi.calculate_average())
```


### __str__ 메서드를 사용해 출력 커스터마이징

__str__ 메서드를 사용하면 객체를 출력할 때의 형식을 정의할 수 있다.

```{python}
class Student:
    def __init__(self, first, last, midterm, final):
        self.first = first
        self.last = last
        self.email = f"{first.lower()}-{last.lower()}@gmail.com"
        self.midterm = midterm
        self.final = final
    
    def calculate_total(self):
        return self.midterm + self.final
    
    def calculate_average(self):
        return (self.midterm + self.final) / 2
    
    # __str__ 메서드
    def __str__(self):
        return (
            f"Student: {self.first} {self.last}\n"
            f"Email: {self.email}\n"
            f"Midterm: {self.midterm}, Final: {self.final}\n"
            f"Total: {self.calculate_total()}, Average: {self.calculate_average()}"
        )

soony = Student("Soony", "Kim", 70, 20)
print(soony)
```

## 상속(Inheritance)

OOP에서 상속은 기존 클래스의 속성과 메서드를 그대로 가져오면서, 새로운 속성과 메서드를 추가하거나 기존 것을 변경할 수 있는 강력한 기능이다. 예를 들어, Student 클래스를 상속받아 특정 대학교의 학생 클래스를 만들어보자.

```{python}
class UspStudent(Student):
    university_name = "University of Statistics Playbook"
    
    def __init__(self, first, last, midterm, final, year):
        super().__init__(first, last, midterm, final)  # 상위 클래스 초기화
        self.year = year
    
    def __str__(self):
        base_info = super().__str__()
        return f"{base_info}\nYear: {self.year}, University: {self.university_name}"

# 객체 생성
sanghoon = UspStudent("Sanghoon", "Park", 80, 56, 2023)
print(sanghoon)

```

### 비공개 속성 (Private Attribute)

Python에서는 비공개 속성을 _ 또는 __로 시작하는 이름으로 정의해 사용할 수 있다.

```{python}
class UspStudent(Student):
    university_name = "University of Statistics Playbook"
    
    def __init__(self, first, last, midterm, final, year):
        super().__init__(first, last, midterm, final)
        self.year = year
        self.__average = None  # 비공개 속성
    
    def calculate_average(self):
        self.__average = super().calculate_average()
        return self.__average
    
    def get_average(self):
        return self.__average

connie = UspStudent("Connie", "Kim", 78, 82, 2023)
connie.calculate_average()
print(connie.get_average())
```

### 읽기 전용 속성 (Property)

Python에서는 @property 데코레이터를 사용해 읽기 전용 속성을 정의할 수 있다.

```{python}
class UspStudent(Student):
    university_name = "University of Statistics Playbook"
    
    def __init__(self, first, last, midterm, final, year):
        super().__init__(first, last, midterm, final)
        self.year = year
        self._average = None
    
    @property
    def average(self):
        if self._average is None:
            self._average = super().calculate_average()
        return self._average

connie = UspStudent("Connie", "Kim", 78, 82, 2023)
print(connie.average)
```

OOP를 활용하면 재사용 가능한 코드 작성이 가능해지고, 더 복잡한 구조도 관리하기 쉬워진다.